def addh(X1, z1, X2, z2, X0, z0, n):  return ((z0 * (X1 * X2 - z1 * z2)**2)%n, (X0 * (X1 * z2 - X2 * z1)**2)%n)

def doubleh(X1, z1, n, c): return (((X1**2 - z1**2)**2)%n, (4* z1 *(X1**3 - c * z1 * X1**2 + X1 * z1**2))%n)

def ell_mul(k, x, z, n, c):
    if k == 1:
        return (x, z)
    if k == 2:
        return doubleh(x, z, n, c)
    (u, v) = (x, z)
    (t, w) = doubleh(u, v, n, c)
    binen = '{0:b}'.format(k)
    i = len(binen)-2
    while i>=1:
        if binen[i] == 1:
            (u, v) = addh(t, w, u, v, x, z, n)
            (t, w) = doubleh(t, w, n, c)
        else:
            (t, w) = addh(t, w, u, v, x, z, n)
            (u, v) = doubleh(u, v, n, c)
        i = i - 1
    if binen[0] == 1:
        return addh(u, v, t, w, x, z, n)
    return doubleh(u, v, n, c)

def coord_gen(n, s_mass, B1):
    r = 2
    sigma = 0
    u = 0
    v = 0
    j = 2
    while r != 1 or sigma == 0:
        if len(s_mass) == 0:
            sigma = 2
        else:
            sigma = s_mass[-1] + 1
            if sigma == 5:
                sigma = 6
            if sigma >= n:
                s_mass.clear()
                sigma = 2
                B1 = B1*10
        u = (sigma**2 - 5) % n
        v = (4*sigma) % n
        r = gcd(4 * v * u ** 3, n)
        s_mass.append(sigma)
    l = (pow(4 * v * u ** 3, -1, n)) % n
    c = ((((v - u) ** 3) * (3 * u + v)) * l - 2) % n
    j = gcd(2*(u ** 9 + 2 * c * u ** 6 + u ** 3), n)
    if j == 1:
        (x, z) = (u ** 3 % n, (3 * u ** 6 + 4 * c * u ** 3 + 1)*(pow(2*(u ** 9 + 2 * c * u ** 6 + u ** 3), -1, n)) % n)
        if (x == z):
            (x, z) = (u ** 3 % n, v ** 3 % n)
    else:
        (x, z) = (u ** 3 % n, v ** 3 % n)
    return x, z, c, s_mass, B1


def pre_first_step(n, factoriz, s_mass, B1):
    while gcd(6, n) != 1:
        if gcd(6, n) != 6:
            factoriz.append(gcd(6, n))
        else:
            factoriz.append(2)
            factoriz.append(3)
        n = n // gcd(6, n)
    if n != 1:
        if int(n**0.5) == n**0.5:
            factoriz.append(floor(n**0.5))
            factoriz.append(floor(n**0.5))
            n = 1
    e = len(factoriz)
    x, z, c, s_mass, B1 = coord_gen(n, s_mass, B1)
    return n, e, c, x, z, factoriz, s_mass, B1

def step_one(x, z, n, B1, factoriz, c, s_mass, flag):
    if n < B1:
        B1 = n
    p = 1
    for i in prime_range(0, B1+1):
        a = floor(log(B1, i))
        p = p*(i ** a)
    (x, z) = ell_mul(p, x, z, n, c)
    g = sage.rings.integer.Integer(gcd(z, n))
    if (g > 1) and (g < n):
        factoriz.append(g)
        n = n // g
    else:
        if is_prime(n):
            factoriz.append(n)
            n = 1
        else:
            flag = flag + 1
    return flag, n, factoriz, s_mass

def factorization_L(n):
    e = 0
    factoriz = []
    s_mass = []
    B1 = 10000
    if n != 1:
        n, e, c, x, z, factoriz, s_mass, B1 = pre_first_step(n, factoriz, s_mass, B1)
    while n != 1:
        flag = 0
        flag, n, factoriz, s_mass = step_one(x, z, n, B1, factoriz, c, s_mass, flag)
        if n != 1:
            if int(n**0.5) == n**0.5:
                factoriz.append(floor(n**0.5))
                factoriz.append(floor(n**0.5))
                n = 1
            else:
                if flag == 1:
                    if B1>n:
                        B1 = 10000
                else:
                    s_mass.clear()
                x, z, c, s_mass, B1 = coord_gen(n, s_mass, B1)
    for i in range(0, len(factoriz)):
        while is_prime(factoriz[i]) == False:
            q, w = factorization_L(factoriz[i])
            factoriz[i] = w[0]
            for j in range(1, len(w)):
                factoriz.append(w[j])
    return e, factoriz

def Lenstra(n):
    e, factoriz = factorization_L(n)
    p = 0
    if n == factoriz[e-1]:
        print(str(n) + ' - простое число')
        p = 1
    elif e == len(factoriz):
        print(str(factoriz[e-1]) + ' - нетривиальный делитель')
    else:
        print(str(factoriz[e]) + ' - нетривиальный делитель')
    if p != 1:
        for i in range(len(factoriz) - 1):
            for j in range(len(factoriz) - i - 1):
                if factoriz[j] > factoriz[j + 1]:
                    factoriz[j], factoriz[j + 1] = factoriz[j + 1], factoriz[j]
        print(str(n) + ' = ', end='')
        o = 1
        i = 0
        while i in range(0, len(factoriz)):
            o = 1
            while i + o < len(factoriz) and factoriz[i] == factoriz[i + o]:
                o = o + 1
            if o == 1:
                print(str(factoriz[i]), end='')
            else:
                print(str(factoriz[i]) + '^' + str(o), end='')
            if factoriz[i + o - 1] != factoriz[-1]:
                print(' * ', end='')
            i = i + o
        print('')
